#!/usr/bin/env python
# Time-stamp: <2012-02-10 17:14:00 Tao Liu>

"""Description: Naive call differential peaks from 4 bedGraph tracks for scores.

Copyright (c) 2011 Tao Liu <taoliu@jimmy.harvard.edu>

This code is free software; you can redistribute it and/or modify it
under the terms of the BSD License (see the file COPYING included with
the distribution).

@status:  experimental
@version: $Revision$
@author:  Tao Liu
@contact: taoliu@jimmy.harvard.edu
"""

# ------------------------------------
# python modules
# ------------------------------------

import os
import sys
import re
import logging
from optparse import OptionParser
from MACS2.IO.cBedGraphIO import bedGraphIO,genericBedIO
from MACS2.IO.cPeakIO import Region
from MACS2.IO.cCompositeScoreTrack import *
from MACS2.cStat import *
from math import log

# ------------------------------------
# constants
# ------------------------------------
logging.basicConfig(level=20,
                    format='%(levelname)-5s @ %(asctime)s: %(message)s ',
                    datefmt='%a, %d %b %Y %H:%M:%S',
                    stream=sys.stderr,
                    filemode="w"
                    )

# ------------------------------------
# Misc functions
# ------------------------------------
error   = logging.critical		# function alias
warn    = logging.warning
debug   = logging.debug
info    = logging.info
# ------------------------------------
# Classes
# ------------------------------------

# ------------------------------------
# Main function
# ------------------------------------
def main():
    usage = "usage: %prog <-b union.bed> <--s1 bedGraph> <--s2 bedGraph> <--s12 bedGraph> <--s21 bedGraph> [-c CUTOFF] [-l MIN] [-g MAX] [-o PREFIX]"
    description = "Call differential regions from four bedGraph files of ChIP pileup 1/2 and control signal 1/2, with customized settings. Please read the descriptions of options carefully."
    
    optparser = OptionParser(version="%prog 0.1",description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="Show this help message and exit.")
    optparser.add_option("--bed1",dest="peak1",type="string",
                         help="Peak regions of condition 1")
    optparser.add_option("--bed2",dest="peak2",type="string",
                         help="Peak regions of condition 2")    
    optparser.add_option("--t1",dest="t1bdg",type="string",
                         help="MACS pileup bedGraph for condition 1.")
    optparser.add_option("--t2",dest="t2bdg",type="string",
                         help="MACS pileup bedGraph for condition 2.")                         
    #optparser.add_option("-Z","--offset",dest="offset",type="float",
    #                     help="The arbitrary number added to comparison to avoid zero counts. *PLEASE DONE CHANGE IT*. DEFAULT: 1",default=1)
    optparser.add_option("-C","--cutoff",dest="cutoff",type="float",
                         help="Cutoff for GFOLD. DEFAULT: 0.01",default=0.01)
    optparser.add_option("--MCMC",dest="do_MCMC",action="store_true",
                         help="Turn on MCMC simulation, will be quite slow",default=False)
    # optparser.add_option("-l","--min-length",dest="minlen",type="int",
    #                      help="minimum length of peak, better to set it as d value. DEFAULT: 200",default=200)
    # optparser.add_option("-g","--max-gap",dest="maxgap",type="int",
    #                      help="maximum gap between significant points in a peak, better to set it as tag size. DEFAULT: 30",default=30)
    optparser.add_option("-o","--o-prefix",dest="oprefix",default="peak",type="string",
                         help="output file prefix, DEFAULT: peak") 
    (options,args) = optparser.parse_args()

    if not (options.t1bdg and options.t2bdg and options.peak1 and options.peak2):
        optparser.print_help()
        sys.exit()

    info("Read and build PeakIO...")
    info("Peak of condition 1 treatment...")

    t1_peakio = genericBedIO(options.peak1)
    t1_peak = t1_peakio.build_bedtrack()
    #t1_peak.apply_func(lambda x:int(x!=0))

    info("Peak of condition 2 treatment...")

    t2_peakio = genericBedIO(options.peak2)
    t2_peak = t2_peakio.build_bedtrack()
    #t2_peak.apply_func(lambda x:int(x!=0))
    union_peak = t1_peak.overlie(t2_peak)
    #t1_peak.write_bedGraph(file("1","w"),"1","1")
    #t2_peak.write_bedGraph(file("2","w"),"2","2")
    #union_peak.write_bedGraph(file("3","w"),"3","3")

    info("Read and build bedGraph...")
    info("Pileup of condition 1 treatment...")
    t1_bio = bedGraphIO(options.t1bdg)
    t1_btrack = t1_bio.build_bdgtrack(baseline_value=0)#options.zerocount)
    # set zerocount to options.zerocount
    #t1_btrack.filter_score(options.zerocount)
    info("Pileup of condition 2 treatment...")
    t2_bio = bedGraphIO(options.t2bdg)
    t2_btrack = t2_bio.build_bdgtrack(baseline_value=0)#options.zerocount)
    # set zerocount to options.zerocount
    #t2_btrack.filter_score(options.zerocount)    

    n1 = t1_btrack.summary()[0]/1000000.0
    n2 = t2_btrack.summary()[0]/1000000.0

    #offset = options.offset

    # combine two tracks
    info("Combine tracks...")
    comb_track = t1_btrack.make_scoreTrack_for_macs2diff(t2_btrack)

    info("Extract average values in union regions...")
    v1 = comb_track.extract_average(union_peak)

    residue_n1_to_n2 = log(n2,2)-log2(n1,2) # a residue to be added to gfold regarding to sequencing depth.

    c = options.cutoff

    info("Convert gfold...")
    gfolds = convert_gfold(v1,cutoff=c,mcmc=options.do_MCMC)

    # sort by gfold
    gfolds.sort(cmp=lambda x,y:cmp(x[1],y[1]))

    # add residue
    for i in xrange(len(gfolds)):
        gfolds[i][1]+=residue_n1_to_n2
    
    ofhd = open(options.oprefix+"_diff.bed","w")

    for (rid, gf) in gfolds:
        if gf != 0:
            (chrom,start,end) = rid.split('.')
            #print chrom,start,end,'.',gf
            ofhd.write( "%s\t%s\t%s\t%s\t%.5f\n" % (chrom,start,end,'.',gf) )

    ofhd.close()

    ofhd = open(options.oprefix+"_diff.txt","w")

    gf_dict = dict(gfolds)

    for i in xrange(len(v1[0])):
        #print v1[0][i],v1[1][i]/n1,v1[2][i]/n2
        gftmp = gf_dict[v1[0][i]]
        tmp1 = v1[1][i]
        tmp2 = v1[2][i]
        ofhd.write("%s\t%.2f\t%.2f\t%.5f\n" % (v1[0][i],tmp1,tmp2,gftmp))

    ofhd.close()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt me! ;-) See you!\n")
        sys.exit(0)

