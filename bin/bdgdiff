#!/usr/bin/env python
# Time-stamp: <2012-02-27 00:21:59 Tao Liu>

"""Description: Naive call differential peaks from 4 bedGraph tracks for scores.

Copyright (c) 2011 Tao Liu <taoliu@jimmy.harvard.edu>

This code is free software; you can redistribute it and/or modify it
under the terms of the BSD License (see the file COPYING included with
the distribution).

@status:  experimental
@version: $Revision$
@author:  Tao Liu
@contact: taoliu@jimmy.harvard.edu
"""

# ------------------------------------
# python modules
# ------------------------------------

import os
import sys
import re
import logging
from optparse import OptionParser
from MACS2.IO.cBedGraphIO import bedGraphIO,genericBedIO
from MACS2.IO.cPeakIO import Region
from MACS2.IO.cCompositeScoreTrack import *
from MACS2.cStat import *
#from MACS2.data import PreCompiledGFold as PCGF
from MACS2.data import FakePreCompiledGFold as PCGF
from math import log

# ------------------------------------
# constants
# ------------------------------------
logging.basicConfig(level=20,
                    format='%(levelname)-5s @ %(asctime)s: %(message)s ',
                    datefmt='%a, %d %b %Y %H:%M:%S',
                    stream=sys.stderr,
                    filemode="w"
                    )

# ------------------------------------
# Misc functions
# ------------------------------------
error   = logging.critical		# function alias
warn    = logging.warning
debug   = logging.debug
info    = logging.info
# ------------------------------------
# Classes
# ------------------------------------

# ------------------------------------
# Main function
# ------------------------------------
def main():
    usage = "usage: %prog <-b union.bed> <--s1 bedGraph> <--s2 bedGraph> <--s12 bedGraph> <--s21 bedGraph> [-c CUTOFF] [-l MIN] [-g MAX] [-o PREFIX]"
    description = "Call differential regions from four bedGraph files of ChIP pileup 1/2 and control signal 1/2, with customized settings. Please read the descriptions of options carefully."
    
    optparser = OptionParser(version="%prog 0.1",description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="Show this help message and exit.")
    optparser.add_option("--bed1",dest="peak1",type="string",
                         help="Peak regions of condition 1")
    optparser.add_option("--bed2",dest="peak2",type="string",
                         help="Peak regions of condition 2")    
    optparser.add_option("--t1",dest="t1bdg",type="string",
                         help="MACS pileup bedGraph for condition 1.")
    optparser.add_option("--t2",dest="t2bdg",type="string",
                         help="MACS pileup bedGraph for condition 2.")                         
    optparser.add_option("-C","--cutoff",dest="cutoff",type="float",
                         help="Cutoff for GFOLD. Can only be 0.05, or 0.01. DEFAULT: 0.01",default=0.01)
    #optparser.add_option("--MCMC",dest="do_MCMC",action="store_true",
    #                     help="Turn on MCMC simulation, will be quite slow",default=False)
    optparser.add_option("-o","--o-prefix",dest="oprefix",default="peak",type="string",
                         help="output file prefix, DEFAULT: peak") 
    (options,args) = optparser.parse_args()

    if not (options.t1bdg and options.t2bdg and options.peak1 and options.peak2):
        optparser.print_help()
        sys.exit()

    options.do_MCMC = True
    
    # load precompiled matrix
    if options.cutoff in [0.05,0.01]:
        gfolds_c = PCGF(options.cutoff)
    else:
        error("-C can only be 0.05, or 0.01!")
        sys.exit(1)

    info("Read peak files...")
    info("Peak of condition 1 treatment...")

    t1_peakio = genericBedIO(options.peak1)
    t1_peak = t1_peakio.build_bedtrack()

    info("Peak of condition 2 treatment...")

    t2_peakio = genericBedIO(options.peak2)
    t2_peak = t2_peakio.build_bedtrack()

    # get union peak regions
    union_peak = t1_peak.overlie(t2_peak)

    info("Read and build bedGraph...")
    info("Pileup of condition 1 treatment...")
    t1_bio = bedGraphIO(options.t1bdg)
    t1_btrack = t1_bio.build_bdgtrack(baseline_value=0)

    info("Pileup of condition 2 treatment...")
    t2_bio = bedGraphIO(options.t2bdg)
    t2_btrack = t2_bio.build_bdgtrack(baseline_value=0)

    # calculate sum of all signals in million
    t1_sum = t1_btrack.summary()[0]
    t2_sum = t2_btrack.summary()[0]    
    n1 = t1_sum/1000000.0
    n2 = t2_sum/1000000.0
    offset = -log(n1,2)+log(n2,2)
    info("t1 sum: %.1f, t2 sum: %.1f, Offset is %.2f" % (t1_sum,t2_sum,offset))

    # combine two tracks
    info("Combine tracks...")
    comb_track = t1_btrack.make_scoreTrack_for_macs2diff(t2_btrack)

    info("Extract average values in union regions...")
    data_in_union = comb_track.extract_average(union_peak) # ([id,...],[count1,...],[count2,...])

    # if n1 > n2:
    #     r1 = n1/n2
    #     r2 = 1
    # else:
    #     r1 = 1
    #     r2 = n2/n1
    for i in xrange(len(data_in_union[0])):
        data_in_union[1][i] = int(data_in_union[1][i]) # actual values are Pileup Per Peak Per Million reads (PPPPM)
        data_in_union[2][i] = int(data_in_union[2][i])

    #info("Convert gfold...")
    info( "Calculate gfold ..." )
    gfolds = convert_gfold(data_in_union, gfolds_c, offset=offset, cutoff=options.cutoff,mcmc=options.do_MCMC)
    
    # sort by gfold
    gfolds.sort(cmp=lambda x,y:cmp(x[1],y[1]))

    # write differential regions with gfold>0

    info( "Write differential regions to %s ..." % (options.oprefix+"_diff.bed") )
    ofhd = open(options.oprefix+"_diff.bed","w")

    for (rid, gf) in gfolds:
        if gf != 0:
            (chrom,start,end) = rid.split('.')
            ofhd.write( "%s\t%s\t%s\t%s\t%.5f\n" % (chrom,start,end,'.',gf) )

    ofhd.close()

    info( "Write gfold values for each region to %s ..." % (options.oprefix+"_diff.txt") )
    ofhd = open(options.oprefix+"_diff.txt","w")

    gf_dict = dict(gfolds)

    for i in xrange(len(data_in_union[0])):
        gftmp = gf_dict[data_in_union[0][i]]
        tmp1 = data_in_union[1][i]
        tmp2 = data_in_union[2][i]
        ofhd.write("%s\t%.5f\t%.5f\t%.5f\n" % (data_in_union[0][i],tmp1/n1,tmp2/n2,gftmp))

    ofhd.close()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt me! ;-) See you!\n")
        sys.exit(0)

