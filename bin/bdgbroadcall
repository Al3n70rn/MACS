#!/usr/bin/env python
# Time-stamp: <2011-09-07 23:29:30 Tao Liu>

"""Description: Naive call broad peaks from a single bedGraph track for scores.

Copyright (c) 2011 Tao Liu <taoliu@jimmy.harvard.edu>

This code is free software; you can redistribute it and/or modify it
under the terms of the BSD License (see the file COPYING included with
the distribution).

@status:  experimental
@version: $Revision$
@author:  Tao Liu
@contact: taoliu@jimmy.harvard.edu
"""

# ------------------------------------
# python modules
# ------------------------------------

import os
import sys
import re
import logging
from optparse import OptionParser
from MACS2.IO import bedGraphIO
from math import log as mlog
from math import log10 as mlog10
# ------------------------------------
# constants
# ------------------------------------
logging.basicConfig(level=20,
                    format='%(levelname)-5s @ %(asctime)s: %(message)s ',
                    datefmt='%a, %d %b %Y %H:%M:%S',
                    stream=sys.stderr,
                    filemode="w"
                    )

# ------------------------------------
# Misc functions
# ------------------------------------
error   = logging.critical		# function alias
warn    = logging.warning
debug   = logging.debug
info    = logging.info
# ------------------------------------
# Classes
# ------------------------------------

# ------------------------------------
# Main function
# ------------------------------------
def main():
    usage = "usage: %prog <-i bedGraph> [-c CUTOFF] [-l MIN] [-g MAX] [-o PREFIX]"
    description = "Call broad peaks from MACS pvalue or qscore score bedGraph output, with customized settings. Output two files for narrow peaks in encodePeak format, and one for broad peaks in bed12 format."
    
    optparser = OptionParser(version="%prog 0.1",description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="Show this help message and exit.")
    optparser.add_option("-i","--ifile",dest="ifile",type="string",
                         help="MACS pvalue score bedGraph")
    optparser.add_option("-c","--cutoff-peak",dest="cutoffpeak",type="float",
                         help="Cutoff for peaks depending on which method you used for score track. If the file contains qvalue scores from MACS2, score 2 means qvalue 0.01. DEFAULT: 2",default=2)
    optparser.add_option("-d","--cutoff-low",dest="cutofflink",type="float",
                         help="Cutoff for linkage regions/low abundance regions depending on which method you used for score track. If the file contains qvalue scores from MACS2, score 1 means qvalue 0.1, and score 0.3 means qvalue 0.5. DEFAULT: 5",default=1)
    optparser.add_option("-l","--min-length",dest="minlen",type="int",
                         help="minimum length of peak, better to set it as d value. DEFAULT: 200",default=200)
    optparser.add_option("-g","--max-gap",dest="maxgap",type="int",
                         help="maximum gap between significant peaks, better to set it as tag size. DEFAULT: 30",default=30)
    optparser.add_option("-o","--o-prefix",dest="oprefix",default="peak",
                         help="output file prefix, DEFAULT: peak") 
    (options,args) = optparser.parse_args()

    if not options.ifile:
        optparser.print_help()
        sys.exit()

    info("Read and build bedGraph...")
    bio = bedGraphIO.bedGraphIO(options.ifile)
    btrack = bio.build_bdgtrack(baseline_value=0)

    info("Call peaks from bedGraph...")
    (peaks,bpeaks) = btrack.call_broadpeaks (lvl1_cutoff=options.cutoffpeak, lvl2_cutoff=options.cutofflink, min_length=options.minlen, lvl1_max_gap=options.maxgap, lvl2_max_gap=options.minlen*2)

    info("Write peaks...")
    #pf = open ("%s_c%.0f_l%d_g%d_peaks.bed" % (options.oprefix,options.cutoffpeak,options.minlen,options.maxgap),"w")
    #sf = open ("%s_c%.0f_l%d_g%d_summits.bed" % (options.oprefix,options.cutoffpeak,options.minlen,options.maxgap),"w")
    nf = open ("%s_c%.0f_l%d_g%d_peaks.encodePeak" % (options.oprefix,options.cutoffpeak,options.minlen,options.maxgap),"w")
    bf = open ("%s_c1%.0f_c2%.0f_l%d_g%d_broad.bed" % (options.oprefix,options.cutoffpeak,options.cutofflink,options.minlen,options.maxgap),"w")        
    #peaks.write_to_bed(pf,name_prefix=options.oprefix+"_peak_", score_column="score")
    #peaks.write_to_summit_bed(sf,name_prefix=options.oprefix+"_summit_", score_column="score")
    peaks.write_to_narrowPeak(nf, name_prefix=options.oprefix+"_encodePeak", score_column="score")
    bpeaks.write_to_gappedPeak(bf, name_prefix=options.oprefix+"_broadRegion")    
    info("Done")
    
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt me! ;-) See you!\n")
        sys.exit(0)

