#!/usr/bin/env python
# Time-stamp: <2011-06-17 00:39:25 Tao Liu>

"""Description: Naive call peaks from a single bedGraph track for scores.

Copyright (c) 2008 Tao Liu <taoliu@jimmy.harvard.edu>

This code is free software; you can redistribute it and/or modify it
under the terms of the BSD License (see the file COPYING included with
the distribution).

@status:  experimental
@version: $Revision$
@author:  Tao Liu
@contact: taoliu@jimmy.harvard.edu
"""

# ------------------------------------
# python modules
# ------------------------------------

import os
import sys
import re
import logging
from optparse import OptionParser
from MACS2.IO import bedGraphIO
from math import log as mlog
from math import log10 as mlog10
# ------------------------------------
# constants
# ------------------------------------
logging.basicConfig(level=20,
                    format='%(levelname)-5s @ %(asctime)s: %(message)s ',
                    datefmt='%a, %d %b %Y %H:%M:%S',
                    stream=sys.stderr,
                    filemode="w"
                    )

# ------------------------------------
# Misc functions
# ------------------------------------
error   = logging.critical		# function alias
warn    = logging.warning
debug   = logging.debug
info    = logging.info
# ------------------------------------
# Classes
# ------------------------------------

# ------------------------------------
# Main function
# ------------------------------------
def main():
    usage = "usage: %prog <-i bedGraph> [-c CUTOFF] [-l MIN] [-g MAX] [-o PREFIX]"
    description = "Call peaks from MACS pvalue score bedGraph output, with customized settings."
    
    optparser = OptionParser(version="%prog 0.1",description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="Show this help message and exit.")
    optparser.add_option("-i","--ifile",dest="ifile",type="string",
                         help="MACS pvalue score bedGraph")
    optparser.add_option("-c","--cutoff",dest="cutoff",type="float",
                         help="Cutoff depends on which method you used for score track. If the file contains pvalue scores from MACS2, score 50 means pvalue 1e-5. DEFAULT: 50",default=50)
    optparser.add_option("-l","--min-length",dest="minlen",type="int",
                         help="minimum length of peak, better to set it as d value. DEFAULT: 200",default=200)
    optparser.add_option("-g","--max-gap",dest="maxgap",type="int",
                         help="maximum gap between significant points in a peak, better to set it as tag size. DEFAULT: 30",default=30)
    optparser.add_option("-o","--o-prefix",dest="oprefix",
                         help="output file prefix, DEFAULT: peak") 
    (options,args) = optparser.parse_args()

    if not options.ifile:
        optparser.print_help()
        sys.exit()

    info("Read and build bedGraph...")
    bio = bedGraphIO.bedGraphIO(options.ifile)
    btrack = bio.build_bdgtrack(baseline_value=0)

    info("making pvalue list...")
    value_list = btrack.make_value_list()
    info("write to file...")
    tmpfhd = open("tmpvalue.txt","w")
    for (v,l) in value_list:
        tmpfhd.write("%.2f\t%d\n" % (v,l))
    tmpfhd.close()

    m = sum(value_list['l'])
    print "total length:",m
    k = 1
    c = mlog(m)+0.57721566490153286060
    f = mlog10(c)+mlog10(m)
    print "f",f
    pre_v = -1e310
    info("write to pvalue to qvalue file...")
    tmpfhd = open("tmp_pvalue2qvalue.txt","w")
    for i in xrange(value_list.size-1,-1,-1):
        v,l = value_list[i]
        if v != pre_v:
            # new value
            print v,k,f-mlog10(k)
            q = (f-mlog10(k)+(v/-10))*-10
            tmpfhd.write("%.2f\t%.2f\n" % ( v,q ))
            pre_v = v
        k+=l
    tmpfhd.close()
        
        

    info("Call peaks from bedGraph...")    
    peaks = btrack.call_peaks(cutoff=options.cutoff,min_length=options.minlen,max_gap=options.maxgap)

    info("Write peaks...")
    pf = open ("%s_c%.0f_l%d_g%d_peaks.bed" % (options.oprefix,options.cutoff,options.minlen,options.maxgap),"w")
    sf = open ("%s_c%.0f_l%d_g%d_summits.bed" % (options.oprefix,options.cutoff,options.minlen,options.maxgap),"w")    
    peaks.write_to_bed(pf,name_prefix=options.oprefix+"_peak_")
    peaks.write_to_summit_bed(sf,name_prefix=options.oprefix+"_summit_")

    
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt me! ;-) See you!\n")
        sys.exit(0)

